/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * ÎπåÎ¶¥Í≤å(Billilge) API
 * Íµ≠ÎØºÎåÄÌïôÍµê ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ÏúµÌï©ÎåÄÌïô Î≥µÏßÄÎ¨ºÌíà ÎåÄÏó¨ ÏÑúÎπÑÏä§
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddItemBody,
  AdminFindAllResponse,
  AdminItemFindAllResponse,
  AdminLoginRequest,
  AdminLoginResponse,
  AdminRentalHistoryFindAllResponse,
  AdminRequest,
  DashboardResponse,
  ErrorResponse,
  GetAdminListParams,
  GetAllAdminItemsParams,
  GetAllDashboardApplicationsParams,
  GetAllMembersParams,
  GetAllPayersParams,
  GetAllRentalHistoriesParams,
  GetItemsParams,
  GetMemberRentalHistoryParams,
  ItemDetail,
  ItemFindAllResponse,
  MemberFCMTokenRequest,
  MemberFindAllResponse,
  NotificationCountResponse,
  NotificationFindAllResponse,
  PayerDeleteRequest,
  PayerFindAllResponse,
  PayerRequest,
  RentalHistoryFindAllResponse,
  RentalHistoryRequest,
  RentalStatusUpdateRequest,
  ReturnRequiredItemFindAllResponse,
  SignUpRequest,
  SignUpResponse,
  UpdateItemBody
} from './model';

import { customMutator } from '../lib/axiosMutator';
/**
 * IDÎ°ú Î¨ºÌíàÏùÑ ÏÉÅÏÑ∏ Ï°∞ÌöåÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary Î¨ºÌíà ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getItemById = (
    itemId: number,
 signal?: AbortSignal
) => {
      
      
      return customMutator<ItemDetail>(
      {url: `/admin/items/${itemId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetItemByIdQueryKey = (itemId: number,) => {
    return [`/admin/items/${itemId}`] as const;
    }

    
export const getGetItemByIdQueryOptions = <TData = Awaited<ReturnType<typeof getItemById>>, TError = unknown>(itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemByIdQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemById>>> = ({ signal }) => getItemById(itemId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getItemById>>>
export type GetItemByIdQueryError = unknown


export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = unknown>(
 itemId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemById>>,
          TError,
          Awaited<ReturnType<typeof getItemById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = unknown>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemById>>,
          TError,
          Awaited<ReturnType<typeof getItemById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = unknown>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Î¨ºÌíà ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = unknown>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemByIdQueryOptions(itemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÎåÄÏó¨ Î¨ºÌíà Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÎåÄÏó¨ Î¨ºÌíà ÏàòÏ†ï
 */
export const updateItem = (
    itemId: number,
    updateItemBody: UpdateItemBody,
 ) => {
      
      const formData = new FormData();
formData.append(`image`, updateItemBody.image)
formData.append(`itemRequest`, JSON.stringify(updateItemBody.itemRequest));

      return customMutator<void>(
      {url: `/admin/items/${itemId}`, method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getUpdateItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateItem>>, TError,{itemId: number;data: UpdateItemBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateItem>>, TError,{itemId: number;data: UpdateItemBody}, TContext> => {

const mutationKey = ['updateItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateItem>>, {itemId: number;data: UpdateItemBody}> = (props) => {
          const {itemId,data} = props ?? {};

          return  updateItem(itemId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateItem>>>
    export type UpdateItemMutationBody = UpdateItemBody
    export type UpdateItemMutationError = ErrorResponse

    /**
 * @summary ÎåÄÏó¨ Î¨ºÌíà ÏàòÏ†ï
 */
export const useUpdateItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateItem>>, TError,{itemId: number;data: UpdateItemBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateItem>>,
        TError,
        {itemId: number;data: UpdateItemBody},
        TContext
      > => {

      const mutationOptions = getUpdateItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÎåÄÏó¨ Î¨ºÌíàÏùÑ ÏÇ≠Ï†úÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÎåÄÏó¨ Î¨ºÌíà ÏÇ≠Ï†ú
 */
export const deleteItem = (
    itemId: number,
 ) => {
      
      
      return customMutator<void>(
      {url: `/admin/items/${itemId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItem>>, TError,{itemId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteItem>>, TError,{itemId: number}, TContext> => {

const mutationKey = ['deleteItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteItem>>, {itemId: number}> = (props) => {
          const {itemId} = props ?? {};

          return  deleteItem(itemId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteItem>>>
    
    export type DeleteItemMutationError = ErrorResponse

    /**
 * @summary ÎåÄÏó¨ Î¨ºÌíà ÏÇ≠Ï†ú
 */
export const useDeleteItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItem>>, TError,{itemId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteItem>>,
        TError,
        {itemId: number},
        TContext
      > => {

      const mutationOptions = getDeleteItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÎåÄÏó¨ ÏÉÅÌÉú Î≥ÑÎ°ú Î≥∏Ïù∏Ïùò ÎåÄÏó¨ Í∏∞Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî API
 * @summary Î≥∏Ïù∏Ïùò ÎåÄÏó¨ Í∏∞Î°ù Ï°∞Ìöå
 */
export const getMemberRentalHistory = (
    params?: GetMemberRentalHistoryParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<RentalHistoryFindAllResponse>(
      {url: `/rentals`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMemberRentalHistoryQueryKey = (params?: GetMemberRentalHistoryParams,) => {
    return [`/rentals`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMemberRentalHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = unknown>(params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMemberRentalHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemberRentalHistory>>> = ({ signal }) => getMemberRentalHistory(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMemberRentalHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getMemberRentalHistory>>>
export type GetMemberRentalHistoryQueryError = unknown


export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = unknown>(
 params: undefined |  GetMemberRentalHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberRentalHistory>>,
          TError,
          Awaited<ReturnType<typeof getMemberRentalHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = unknown>(
 params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberRentalHistory>>,
          TError,
          Awaited<ReturnType<typeof getMemberRentalHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = unknown>(
 params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Î≥∏Ïù∏Ïùò ÎåÄÏó¨ Í∏∞Î°ù Ï°∞Ìöå
 */

export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = unknown>(
 params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMemberRentalHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Î¨ºÌíàÏùÑ ÎåÄÏó¨ Ïã†Ï≤≠ÌïòÎäî ÏÇ¨Ïö©ÏûêÏö© API
 * @summary Î¨ºÌíà ÎåÄÏó¨ Ïã†Ï≤≠
 */
export const createRental = (
    rentalHistoryRequest: RentalHistoryRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<void>(
      {url: `/rentals`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: rentalHistoryRequest, signal
    },
      );
    }
  


export const getCreateRentalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRental>>, TError,{data: RentalHistoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createRental>>, TError,{data: RentalHistoryRequest}, TContext> => {

const mutationKey = ['createRental'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRental>>, {data: RentalHistoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createRental(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRentalMutationResult = NonNullable<Awaited<ReturnType<typeof createRental>>>
    export type CreateRentalMutationBody = RentalHistoryRequest
    export type CreateRentalMutationError = unknown

    /**
 * @summary Î¨ºÌíà ÎåÄÏó¨ Ïã†Ï≤≠
 */
export const useCreateRental = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRental>>, TError,{data: RentalHistoryRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createRental>>,
        TError,
        {data: RentalHistoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const createDevRental = (
    rentalHistoryRequest: RentalHistoryRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<void>(
      {url: `/rentals/dev`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: rentalHistoryRequest, signal
    },
      );
    }
  


export const getCreateDevRentalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDevRental>>, TError,{data: RentalHistoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createDevRental>>, TError,{data: RentalHistoryRequest}, TContext> => {

const mutationKey = ['createDevRental'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDevRental>>, {data: RentalHistoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createDevRental(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDevRentalMutationResult = NonNullable<Awaited<ReturnType<typeof createDevRental>>>
    export type CreateDevRentalMutationBody = RentalHistoryRequest
    export type CreateDevRentalMutationError = unknown

    export const useCreateDevRental = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDevRental>>, TError,{data: RentalHistoryRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDevRental>>,
        TError,
        {data: RentalHistoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateDevRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÏÑúÎ≤Ñ Ï∏°ÏúºÎ°ú ÌöåÏõê Í∏∞Í∏∞Ïùò FCM ÌÜ†ÌÅ∞ÏùÑ Ï†ÑÏÜ°ÌïòÎäî API
 * @summary FCM ÌÜ†ÌÅ∞ Ï†ÑÏÜ°
 */
export const setFCMToken = (
    memberFCMTokenRequest: MemberFCMTokenRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<void>(
      {url: `/members/me/fcm-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: memberFCMTokenRequest, signal
    },
      );
    }
  


export const getSetFCMTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setFCMToken>>, TError,{data: MemberFCMTokenRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof setFCMToken>>, TError,{data: MemberFCMTokenRequest}, TContext> => {

const mutationKey = ['setFCMToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setFCMToken>>, {data: MemberFCMTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  setFCMToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetFCMTokenMutationResult = NonNullable<Awaited<ReturnType<typeof setFCMToken>>>
    export type SetFCMTokenMutationBody = MemberFCMTokenRequest
    export type SetFCMTokenMutationError = unknown

    /**
 * @summary FCM ÌÜ†ÌÅ∞ Ï†ÑÏÜ°
 */
export const useSetFCMToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setFCMToken>>, TError,{data: MemberFCMTokenRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setFCMToken>>,
        TError,
        {data: MemberFCMTokenRequest},
        TContext
      > => {

      const mutationOptions = getSetFCMTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ïã†Í∑ú Í∞ÄÏûÖ Ïãú ÌïôÎ≤à, Ïù¥Î¶ÑÏùÑ Î∞õÍ∏∞ ÏúÑÌïú ÌöåÏõêÍ∞ÄÏûÖ API
 * @summary (Íµ¨Í∏Ä Ïã†Í∑ú Í∞ÄÏûÖ Ïãú) ÌöåÏõêÍ∞ÄÏûÖ
 */
export const signUp = (
    signUpRequest: SignUpRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<SignUpResponse>(
      {url: `/auth/sign-up`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpRequest, signal
    },
      );
    }
  


export const getSignUpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpRequest}, TContext> => {

const mutationKey = ['signUp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, {data: SignUpRequest}> = (props) => {
          const {data} = props ?? {};

          return  signUp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
    export type SignUpMutationBody = SignUpRequest
    export type SignUpMutationError = unknown

    /**
 * @summary (Íµ¨Í∏Ä Ïã†Í∑ú Í∞ÄÏûÖ Ïãú) ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useSignUp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof signUp>>,
        TError,
        {data: SignUpRequest},
        TContext
      > => {

      const mutationOptions = getSignUpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Í¥ÄÎ¶¨Ïûê Îç∞Ïä§ÌÅ¨ÌÉë ÌéòÏù¥ÏßÄÏóê Ï†ëÏÜçÌïòÍ∏∞ ÏúÑÌïú Î°úÍ∑∏Ïù∏ API
 * @summary (Í¥ÄÎ¶¨Ïûê Îç∞Ïä§ÌÅ¨ÌÉë) Î°úÍ∑∏Ïù∏
 */
export const loginAdmin = (
    adminLoginRequest: AdminLoginRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<AdminLoginResponse>(
      {url: `/auth/admin-login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminLoginRequest, signal
    },
      );
    }
  


export const getLoginAdminMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAdmin>>, TError,{data: AdminLoginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginAdmin>>, TError,{data: AdminLoginRequest}, TContext> => {

const mutationKey = ['loginAdmin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginAdmin>>, {data: AdminLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  loginAdmin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginAdminMutationResult = NonNullable<Awaited<ReturnType<typeof loginAdmin>>>
    export type LoginAdminMutationBody = AdminLoginRequest
    export type LoginAdminMutationError = ErrorResponse

    /**
 * @summary (Í¥ÄÎ¶¨Ïûê Îç∞Ïä§ÌÅ¨ÌÉë) Î°úÍ∑∏Ïù∏
 */
export const useLoginAdmin = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAdmin>>, TError,{data: AdminLoginRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginAdmin>>,
        TError,
        {data: AdminLoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginAdminMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Î™©Î°ùÏùÑ Ï†ÑÏ≤¥ ÌòπÏùÄ ÌéòÏù¥ÏßÄÎ≥ÑÎ°ú Ï°∞ÌöåÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Î™©Î°ù Ï°∞Ìöå
 */
export const getAllPayers = (
    params?: GetAllPayersParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<PayerFindAllResponse>(
      {url: `/admin/members/payers`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllPayersQueryKey = (params?: GetAllPayersParams,) => {
    return [`/admin/members/payers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllPayersQueryOptions = <TData = Awaited<ReturnType<typeof getAllPayers>>, TError = unknown>(params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPayersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPayers>>> = ({ signal }) => getAllPayers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPayersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPayers>>>
export type GetAllPayersQueryError = unknown


export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = unknown>(
 params: undefined |  GetAllPayersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPayers>>,
          TError,
          Awaited<ReturnType<typeof getAllPayers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = unknown>(
 params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPayers>>,
          TError,
          Awaited<ReturnType<typeof getAllPayers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = unknown>(
 params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = unknown>(
 params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPayersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞ÄÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Ï∂îÍ∞Ä
 */
export const addPayers = (
    payerRequest: PayerRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<void>(
      {url: `/admin/members/payers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: payerRequest, signal
    },
      );
    }
  


export const getAddPayersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPayers>>, TError,{data: PayerRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addPayers>>, TError,{data: PayerRequest}, TContext> => {

const mutationKey = ['addPayers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPayers>>, {data: PayerRequest}> = (props) => {
          const {data} = props ?? {};

          return  addPayers(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPayersMutationResult = NonNullable<Awaited<ReturnType<typeof addPayers>>>
    export type AddPayersMutationBody = PayerRequest
    export type AddPayersMutationError = unknown

    /**
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Ï∂îÍ∞Ä
 */
export const useAddPayers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPayers>>, TError,{data: PayerRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addPayers>>,
        TError,
        {data: PayerRequest},
        TContext
      > => {

      const mutationOptions = getAddPayersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûêÎ•º ÏÇ≠Ï†úÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê ÏÇ≠Ï†ú
 */
export const deletePayers = (
    payerDeleteRequest: PayerDeleteRequest,
 ) => {
      
      
      return customMutator<void>(
      {url: `/admin/members/payers`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: payerDeleteRequest
    },
      );
    }
  


export const getDeletePayersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePayers>>, TError,{data: PayerDeleteRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePayers>>, TError,{data: PayerDeleteRequest}, TContext> => {

const mutationKey = ['deletePayers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePayers>>, {data: PayerDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  deletePayers(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePayersMutationResult = NonNullable<Awaited<ReturnType<typeof deletePayers>>>
    export type DeletePayersMutationBody = PayerDeleteRequest
    export type DeletePayersMutationError = unknown

    /**
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê ÏÇ≠Ï†ú
 */
export const useDeletePayers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePayers>>, TError,{data: PayerDeleteRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePayers>>,
        TError,
        {data: PayerDeleteRequest},
        TContext
      > => {

      const mutationOptions = getDeletePayersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Í¥ÄÎ¶¨Ïûê Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî API
 * @summary Í¥ÄÎ¶¨Ïûê Î™©Î°ù Ï°∞Ìöå
 */
export const getAdminList = (
    params?: GetAdminListParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<AdminFindAllResponse>(
      {url: `/admin/members/admins`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminListQueryKey = (params?: GetAdminListParams,) => {
    return [`/admin/members/admins`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminListQueryOptions = <TData = Awaited<ReturnType<typeof getAdminList>>, TError = unknown>(params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminList>>> = ({ signal }) => getAdminList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminListQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminList>>>
export type GetAdminListQueryError = unknown


export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = unknown>(
 params: undefined |  GetAdminListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminList>>,
          TError,
          Awaited<ReturnType<typeof getAdminList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = unknown>(
 params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminList>>,
          TError,
          Awaited<ReturnType<typeof getAdminList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = unknown>(
 params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í¥ÄÎ¶¨Ïûê Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = unknown>(
 params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÌöåÏõêÏùÑ Í¥ÄÎ¶¨ÏûêÏóê Ï∂îÍ∞ÄÌïòÎäî API
 * @summary Í¥ÄÎ¶¨Ïûê Ï∂îÍ∞Ä
 */
export const addAdmins = (
    adminRequest: AdminRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<void>(
      {url: `/admin/members/admins`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminRequest, signal
    },
      );
    }
  


export const getAddAdminsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addAdmins>>, TError,{data: AdminRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addAdmins>>, TError,{data: AdminRequest}, TContext> => {

const mutationKey = ['addAdmins'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addAdmins>>, {data: AdminRequest}> = (props) => {
          const {data} = props ?? {};

          return  addAdmins(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddAdminsMutationResult = NonNullable<Awaited<ReturnType<typeof addAdmins>>>
    export type AddAdminsMutationBody = AdminRequest
    export type AddAdminsMutationError = unknown

    /**
 * @summary Í¥ÄÎ¶¨Ïûê Ï∂îÍ∞Ä
 */
export const useAddAdmins = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addAdmins>>, TError,{data: AdminRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addAdmins>>,
        TError,
        {data: AdminRequest},
        TContext
      > => {

      const mutationOptions = getAddAdminsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Í¥ÄÎ¶¨Ïûê Î™©Î°ùÏóêÏÑú ÌöåÏõêÏùÑ ÏÇ≠Ï†úÌïòÎäî API
 * @summary Í¥ÄÎ¶¨Ïûê ÏÇ≠Ï†ú
 */
export const deleteAdmins = (
    adminRequest: AdminRequest,
 ) => {
      
      
      return customMutator<void>(
      {url: `/admin/members/admins`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: adminRequest
    },
      );
    }
  


export const getDeleteAdminsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdmins>>, TError,{data: AdminRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdmins>>, TError,{data: AdminRequest}, TContext> => {

const mutationKey = ['deleteAdmins'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdmins>>, {data: AdminRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteAdmins(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdmins>>>
    export type DeleteAdminsMutationBody = AdminRequest
    export type DeleteAdminsMutationError = unknown

    /**
 * @summary Í¥ÄÎ¶¨Ïûê ÏÇ≠Ï†ú
 */
export const useDeleteAdmins = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdmins>>, TError,{data: AdminRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdmins>>,
        TError,
        {data: AdminRequest},
        TContext
      > => {

      const mutationOptions = getDeleteAdminsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÎåÄÏó¨ Î¨ºÌíà Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÎåÄÏó¨ Î¨ºÌíà Î™©Î°ù Ï°∞Ìöå
 */
export const getAllAdminItems = (
    params?: GetAllAdminItemsParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<AdminItemFindAllResponse>(
      {url: `/admin/items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllAdminItemsQueryKey = (params?: GetAllAdminItemsParams,) => {
    return [`/admin/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllAdminItemsQueryOptions = <TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = unknown>(params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAdminItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAdminItems>>> = ({ signal }) => getAllAdminItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAdminItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAdminItems>>>
export type GetAllAdminItemsQueryError = unknown


export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = unknown>(
 params: undefined |  GetAllAdminItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdminItems>>,
          TError,
          Awaited<ReturnType<typeof getAllAdminItems>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = unknown>(
 params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdminItems>>,
          TError,
          Awaited<ReturnType<typeof getAllAdminItems>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = unknown>(
 params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÎåÄÏó¨ Î¨ºÌíà Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = unknown>(
 params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAdminItemsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÎåÄÏó¨ Î¨ºÌíàÏùÑ Îì±Î°ùÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÎåÄÏó¨ Î¨ºÌíà Îì±Î°ù
 */
export const addItem = (
    addItemBody: AddItemBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`image`, addItemBody.image)
formData.append(`itemRequest`, JSON.stringify(addItemBody.itemRequest));

      return customMutator<void>(
      {url: `/admin/items`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getAddItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addItem>>, TError,{data: AddItemBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addItem>>, TError,{data: AddItemBody}, TContext> => {

const mutationKey = ['addItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addItem>>, {data: AddItemBody}> = (props) => {
          const {data} = props ?? {};

          return  addItem(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddItemMutationResult = NonNullable<Awaited<ReturnType<typeof addItem>>>
    export type AddItemMutationBody = AddItemBody
    export type AddItemMutationError = ErrorResponse

    /**
 * @summary ÎåÄÏó¨ Î¨ºÌíà Îì±Î°ù
 */
export const useAddItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addItem>>, TError,{data: AddItemBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addItem>>,
        TError,
        {data: AddItemBody},
        TContext
      > => {

      const mutationOptions = getAddItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÎåÄÏó¨ Ïã†Ï≤≠ÏùÑ Ï∑®ÏÜåÌïòÎäî APIÏûÖÎãàÎã§. Ïã†Ï≤≠Ìïú ÏÇ¨Ïö©ÏûêÎäî ÎåÄÏó¨ Ïã†Ï≤≠ÏùÑ Ï∑®ÏÜåÌï† Ïàò ÏûàÏäµÎãàÎã§.
 * @summary ÎåÄÏó¨ Ï∑®ÏÜå
 */
export const cancelRental = (
    rentalHistoryId: number,
 ) => {
      
      
      return customMutator<void>(
      {url: `/rentals/${rentalHistoryId}`, method: 'PATCH'
    },
      );
    }
  


export const getCancelRentalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelRental>>, TError,{rentalHistoryId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cancelRental>>, TError,{rentalHistoryId: number}, TContext> => {

const mutationKey = ['cancelRental'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelRental>>, {rentalHistoryId: number}> = (props) => {
          const {rentalHistoryId} = props ?? {};

          return  cancelRental(rentalHistoryId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelRentalMutationResult = NonNullable<Awaited<ReturnType<typeof cancelRental>>>
    
    export type CancelRentalMutationError = unknown

    /**
 * @summary ÎåÄÏó¨ Ï∑®ÏÜå
 */
export const useCancelRental = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelRental>>, TError,{rentalHistoryId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cancelRental>>,
        TError,
        {rentalHistoryId: number},
        TContext
      > => {

      const mutationOptions = getCancelRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÎåÄÏó¨Ìïú Î¨ºÌíàÏùò Î∞òÎÇ©ÏùÑ Ïã†Ï≤≠ÌïòÎäî APIÏûÖÎãàÎã§. Î∞òÎÇ© ÏöîÏ≤≠ÏùÑ ÌÜµÌï¥ ÎåÄÏó¨ ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎê©ÎãàÎã§.
 * @summary Î∞òÎÇ© Ïã†Ï≤≠
 */
export const returnRental = (
    rentalHistoryId: number,
 ) => {
      
      
      return customMutator<void>(
      {url: `/rentals/return/${rentalHistoryId}`, method: 'PATCH'
    },
      );
    }
  


export const getReturnRentalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof returnRental>>, TError,{rentalHistoryId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof returnRental>>, TError,{rentalHistoryId: number}, TContext> => {

const mutationKey = ['returnRental'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof returnRental>>, {rentalHistoryId: number}> = (props) => {
          const {rentalHistoryId} = props ?? {};

          return  returnRental(rentalHistoryId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReturnRentalMutationResult = NonNullable<Awaited<ReturnType<typeof returnRental>>>
    
    export type ReturnRentalMutationError = unknown

    /**
 * @summary Î∞òÎÇ© Ïã†Ï≤≠
 */
export const useReturnRental = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof returnRental>>, TError,{rentalHistoryId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof returnRental>>,
        TError,
        {rentalHistoryId: number},
        TContext
      > => {

      const mutationOptions = getReturnRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÌäπÏ†ï ÏïåÎ¶ºÏùÑ ÏùΩÏùå Ï≤òÎ¶¨Ìï©ÎãàÎã§.
 * @summary ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
 */
export const readNotification = (
    notificationId: number,
 ) => {
      
      
      return customMutator<void>(
      {url: `/notifications/${notificationId}`, method: 'PATCH'
    },
      );
    }
  


export const getReadNotificationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readNotification>>, TError,{notificationId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof readNotification>>, TError,{notificationId: number}, TContext> => {

const mutationKey = ['readNotification'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof readNotification>>, {notificationId: number}> = (props) => {
          const {notificationId} = props ?? {};

          return  readNotification(notificationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReadNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof readNotification>>>
    
    export type ReadNotificationMutationError = void

    /**
 * @summary ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
 */
export const useReadNotification = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readNotification>>, TError,{notificationId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof readNotification>>,
        TError,
        {notificationId: number},
        TContext
      > => {

      const mutationOptions = getReadNotificationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÏïåÎ¶ºÏùÑ Î™®Îëê ÏùΩÏùå Ï≤òÎ¶¨Ìï©ÎãàÎã§.
 * @summary ÏïåÎ¶º Î™®Îëê ÏùΩÏùå Ï≤òÎ¶¨
 */
export const readAllNotifications = (
    
 ) => {
      
      
      return customMutator<void>(
      {url: `/notifications/all`, method: 'PATCH'
    },
      );
    }
  


export const getReadAllNotificationsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readAllNotifications>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof readAllNotifications>>, TError,void, TContext> => {

const mutationKey = ['readAllNotifications'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof readAllNotifications>>, void> = () => {
          

          return  readAllNotifications()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReadAllNotificationsMutationResult = NonNullable<Awaited<ReturnType<typeof readAllNotifications>>>
    
    export type ReadAllNotificationsMutationError = void

    /**
 * @summary ÏïåÎ¶º Î™®Îëê ÏùΩÏùå Ï≤òÎ¶¨
 */
export const useReadAllNotifications = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readAllNotifications>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof readAllNotifications>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getReadAllNotificationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÎåÄÏó¨ ÏäπÏù∏, ÎåÄÏó¨, Î∞òÎÇ© ÏäπÏù∏, Î∞òÎÇ© Ï≤òÎ¶¨ Îì±ÏùÑ ÏúÑÌï¥ ÎåÄÏó¨ Í∏∞Î°ùÏùò ÏÉÅÌÉúÎ•º Î≥ÄÍ≤ΩÌïòÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÎåÄÏó¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω
 */
export const updateRentalStatus = (
    rentalHistoryId: number,
    rentalStatusUpdateRequest: RentalStatusUpdateRequest,
 ) => {
      
      
      return customMutator<void>(
      {url: `/admin/rentals/${rentalHistoryId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: rentalStatusUpdateRequest
    },
      );
    }
  


export const getUpdateRentalStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRentalStatus>>, TError,{rentalHistoryId: number;data: RentalStatusUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateRentalStatus>>, TError,{rentalHistoryId: number;data: RentalStatusUpdateRequest}, TContext> => {

const mutationKey = ['updateRentalStatus'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRentalStatus>>, {rentalHistoryId: number;data: RentalStatusUpdateRequest}> = (props) => {
          const {rentalHistoryId,data} = props ?? {};

          return  updateRentalStatus(rentalHistoryId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRentalStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateRentalStatus>>>
    export type UpdateRentalStatusMutationBody = RentalStatusUpdateRequest
    export type UpdateRentalStatusMutationError = unknown

    /**
 * @summary ÎåÄÏó¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω
 */
export const useUpdateRentalStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRentalStatus>>, TError,{rentalHistoryId: number;data: RentalStatusUpdateRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateRentalStatus>>,
        TError,
        {rentalHistoryId: number;data: RentalStatusUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateRentalStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÎåÄÏó¨ Í∏∞Î°ù Ï§ë, ÎåÄÏó¨ ÏÉÅÌÉúÍ∞Ä RENTAL, RETURN_PENDING, RETURN_CONFIRMEDÏù∏ Ìï≠Î™©Îì§ÏùÑ Ï°∞ÌöåÌïòÎäî API
 * @summary Î≥∏Ïù∏Ïùò Î∞òÎÇ© ÌïÑÏöî ÎåÄÏó¨ Í∏∞Î°ù Ï°∞Ìöå
 */
export const getReturnRequiredHistory = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<ReturnRequiredItemFindAllResponse>(
      {url: `/rentals/return-required`, method: 'GET', signal
    },
      );
    }
  

export const getGetReturnRequiredHistoryQueryKey = () => {
    return [`/rentals/return-required`] as const;
    }

    
export const getGetReturnRequiredHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReturnRequiredHistoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReturnRequiredHistory>>> = ({ signal }) => getReturnRequiredHistory(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReturnRequiredHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getReturnRequiredHistory>>>
export type GetReturnRequiredHistoryQueryError = unknown


export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReturnRequiredHistory>>,
          TError,
          Awaited<ReturnType<typeof getReturnRequiredHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReturnRequiredHistory>>,
          TError,
          Awaited<ReturnType<typeof getReturnRequiredHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Î≥∏Ïù∏Ïùò Î∞òÎÇ© ÌïÑÏöî ÎåÄÏó¨ Í∏∞Î°ù Ï°∞Ìöå
 */

export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReturnRequiredHistoryQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÏïåÎ¶º Î™©Î°ùÏùÑ ÏµúÏã†ÏàúÏúºÎ°ú Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©ÏûêÏùò ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
 */
export const getNotifications = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<NotificationFindAllResponse>(
      {url: `/notifications`, method: 'GET', signal
    },
      );
    }
  

export const getGetNotificationsQueryKey = () => {
    return [`/notifications`] as const;
    }

    
export const getGetNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getNotifications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotifications>>> = ({ signal }) => getNotifications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotifications>>>
export type GetNotificationsQueryError = unknown


export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotifications>>,
          TError,
          Awaited<ReturnType<typeof getNotifications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotifications>>,
          TError,
          Awaited<ReturnType<typeof getNotifications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÏÇ¨Ïö©ÏûêÏùò ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
 */

export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÏïåÎ¶º Í∞úÏàòÎ•º Ï°∞ÌöåÌï©ÎãàÎã§. (Î©îÏù∏ ÌéòÏù¥ÏßÄ)
 * @summary ÏïåÎ¶º Í∞úÏàò Ï°∞Ìöå
 */
export const getNotificationCount = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<NotificationCountResponse>(
      {url: `/notifications/count`, method: 'GET', signal
    },
      );
    }
  

export const getGetNotificationCountQueryKey = () => {
    return [`/notifications/count`] as const;
    }

    
export const getGetNotificationCountQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationCount>>> = ({ signal }) => getNotificationCount(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationCountQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationCount>>>
export type GetNotificationCountQueryError = unknown


export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationCount>>,
          TError,
          Awaited<ReturnType<typeof getNotificationCount>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationCount>>,
          TError,
          Awaited<ReturnType<typeof getNotificationCount>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÏïåÎ¶º Í∞úÏàò Ï°∞Ìöå
 */

export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationCountQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Í≤ÄÏÉâÏñ¥Ïóê Îî∞Îùº Î¨ºÌíà Ïù¥Î¶ÑÏóê Ìè¨Ìï®Îêú Îã®Ïñ¥Î•º Í∏∞Î∞òÏúºÎ°ú ÎåÄÏó¨ Î¨ºÌíà Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÎåÄÏó¨ Î¨ºÌíà Î™©Î°ù Ï°∞Ìöå
 */
export const getItems = (
    params?: GetItemsParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<ItemFindAllResponse>(
      {url: `/items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetItemsQueryKey = (params?: GetItemsParams,) => {
    return [`/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetItemsQueryOptions = <TData = Awaited<ReturnType<typeof getItems>>, TError = unknown>(params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItems>>> = ({ signal }) => getItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getItems>>>
export type GetItemsQueryError = unknown


export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = unknown>(
 params: undefined |  GetItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItems>>,
          TError,
          Awaited<ReturnType<typeof getItems>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = unknown>(
 params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItems>>,
          TError,
          Awaited<ReturnType<typeof getItems>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = unknown>(
 params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÎåÄÏó¨ Î¨ºÌíà Î™©Î°ù Ï°∞Ìöå
 */

export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = unknown>(
 params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Î™®Îì† ÎåÄÏó¨ Í∏∞Î°ùÏùÑ Ï°∞ÌöåÌïòÍ∏∞ ÏúÑÌïú Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary Î™®Îì† ÎåÄÏó¨ Í∏∞Î°ù Ï°∞Ìöå
 */
export const getAllRentalHistories = (
    params?: GetAllRentalHistoriesParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<AdminRentalHistoryFindAllResponse>(
      {url: `/admin/rentals`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllRentalHistoriesQueryKey = (params?: GetAllRentalHistoriesParams,) => {
    return [`/admin/rentals`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllRentalHistoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = unknown>(params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRentalHistoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRentalHistories>>> = ({ signal }) => getAllRentalHistories(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllRentalHistoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRentalHistories>>>
export type GetAllRentalHistoriesQueryError = unknown


export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = unknown>(
 params: undefined |  GetAllRentalHistoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRentalHistories>>,
          TError,
          Awaited<ReturnType<typeof getAllRentalHistories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = unknown>(
 params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRentalHistories>>,
          TError,
          Awaited<ReturnType<typeof getAllRentalHistories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = unknown>(
 params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Î™®Îì† ÎåÄÏó¨ Í∏∞Î°ù Ï°∞Ìöå
 */

export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = unknown>(
 params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllRentalHistoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú ÌéòÏù¥ÏßÄ Ï°∞ÌöåÎ•º ÏúÑÌïú API
 * @summary Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú Î™©Î°ù Ï°∞Ìöå
 */
export const getAllDashboardApplications = (
    params?: GetAllDashboardApplicationsParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<DashboardResponse>(
      {url: `/admin/rentals/dashboard`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllDashboardApplicationsQueryKey = (params?: GetAllDashboardApplicationsParams,) => {
    return [`/admin/rentals/dashboard`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllDashboardApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = unknown>(params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDashboardApplicationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDashboardApplications>>> = ({ signal }) => getAllDashboardApplications(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllDashboardApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDashboardApplications>>>
export type GetAllDashboardApplicationsQueryError = unknown


export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = unknown>(
 params: undefined |  GetAllDashboardApplicationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDashboardApplications>>,
          TError,
          Awaited<ReturnType<typeof getAllDashboardApplications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = unknown>(
 params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDashboardApplications>>,
          TError,
          Awaited<ReturnType<typeof getAllDashboardApplications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = unknown>(
 params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = unknown>(
 params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllDashboardApplicationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Î™©Î°ùÏùÑ ÏµúÏã†ÏàúÏúºÎ°ú Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
 */
export const getAdminNotifications = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<NotificationFindAllResponse>(
      {url: `/admin/notifications`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminNotificationsQueryKey = () => {
    return [`/admin/notifications`] as const;
    }

    
export const getGetAdminNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminNotificationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminNotifications>>> = ({ signal }) => getAdminNotifications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminNotifications>>>
export type GetAdminNotificationsQueryError = unknown


export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminNotifications>>,
          TError,
          Awaited<ReturnType<typeof getAdminNotifications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminNotifications>>,
          TError,
          Awaited<ReturnType<typeof getAdminNotifications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminNotificationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÌöåÏõê Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî API
 * @summary ÌöåÏõê Î™©Î°ù Ï°∞Ìöå
 */
export const getAllMembers = (
    params?: GetAllMembersParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<MemberFindAllResponse>(
      {url: `/admin/members`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllMembersQueryKey = (params?: GetAllMembersParams,) => {
    return [`/admin/members`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllMembersQueryOptions = <TData = Awaited<ReturnType<typeof getAllMembers>>, TError = unknown>(params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMembersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMembers>>> = ({ signal }) => getAllMembers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMembers>>>
export type GetAllMembersQueryError = unknown


export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = unknown>(
 params: undefined |  GetAllMembersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMembers>>,
          TError,
          Awaited<ReturnType<typeof getAllMembers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = unknown>(
 params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMembers>>,
          TError,
          Awaited<ReturnType<typeof getAllMembers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = unknown>(
 params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏõê Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = unknown>(
 params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMembersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Îç∞Ïù¥ÌÑ∞Î•º ÏóëÏÖÄ ÌååÏùºÎ°ú Îã§Ïö¥Î∞õÏùÑ Ïàò ÏûàÎäî Í¥ÄÎ¶¨ÏûêÏö© API
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Excel ÌååÏùº Îã§Ïö¥Î°úÎìú
 */
export const createPayerExcel = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<unknown>(
      {url: `/admin/members/payers/excel`, method: 'GET', signal
    },
      );
    }
  

export const getCreatePayerExcelQueryKey = () => {
    return [`/admin/members/payers/excel`] as const;
    }

    
export const getCreatePayerExcelQueryOptions = <TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCreatePayerExcelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof createPayerExcel>>> = ({ signal }) => createPayerExcel(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CreatePayerExcelQueryResult = NonNullable<Awaited<ReturnType<typeof createPayerExcel>>>
export type CreatePayerExcelQueryError = unknown


export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof createPayerExcel>>,
          TError,
          Awaited<ReturnType<typeof createPayerExcel>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof createPayerExcel>>,
          TError,
          Awaited<ReturnType<typeof createPayerExcel>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌïôÏÉùÌöåÎπÑ ÎÇ©Î∂ÄÏûê Excel ÌååÏùº Îã§Ïö¥Î°úÎìú
 */

export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCreatePayerExcelQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
