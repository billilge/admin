/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * 빌릴게(Billilge) API
 * 국민대학교 소프트웨어융합대학 복지물품 대여 서비스
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AddItemBody,
  AdminFindAllResponse,
  AdminItemFindAllResponse,
  AdminLoginRequest,
  AdminLoginResponse,
  AdminRentalHistoryFindAllResponse,
  AdminRequest,
  DashboardResponse,
  ErrorResponse,
  GetAdminListParams,
  GetAllAdminItemsParams,
  GetAllDashboardApplicationsParams,
  GetAllMembersParams,
  GetAllPayersParams,
  GetAllRentalHistoriesParams,
  GetItemsParams,
  GetMemberRentalHistoryParams,
  ItemDetail,
  ItemFindAllResponse,
  MemberFCMTokenRequest,
  MemberFindAllResponse,
  NotificationCountResponse,
  NotificationFindAllResponse,
  PayerDeleteRequest,
  PayerFindAllResponse,
  PayerRequest,
  RentalHistoryFindAllResponse,
  RentalHistoryRequest,
  RentalStatusUpdateRequest,
  ReturnRequiredItemFindAllResponse,
  SignUpRequest,
  SignUpResponse,
  UpdateItemBody
} from './model';

/**
 * ID로 물품을 상세 조회하는 관리자용 API
 * @summary 물품 상세 조회
 */
export const getItemById = (
    itemId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ItemDetail>> => {
    
    
    return axios.get(
      `/admin/items/${itemId}`,options
    );
  }


export const getGetItemByIdQueryKey = (itemId: number,) => {
    return [`/admin/items/${itemId}`] as const;
    }

    
export const getGetItemByIdQueryOptions = <TData = Awaited<ReturnType<typeof getItemById>>, TError = AxiosError<unknown>>(itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemByIdQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemById>>> = ({ signal }) => getItemById(itemId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getItemById>>>
export type GetItemByIdQueryError = AxiosError<unknown>


export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = AxiosError<unknown>>(
 itemId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemById>>,
          TError,
          Awaited<ReturnType<typeof getItemById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = AxiosError<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemById>>,
          TError,
          Awaited<ReturnType<typeof getItemById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = AxiosError<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 물품 상세 조회
 */

export function useGetItemById<TData = Awaited<ReturnType<typeof getItemById>>, TError = AxiosError<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemByIdQueryOptions(itemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 대여 물품 정보를 수정하는 관리자용 API
 * @summary 대여 물품 수정
 */
export const updateItem = (
    itemId: number,
    updateItemBody: UpdateItemBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`image`, updateItemBody.image)
formData.append(`itemRequest`, JSON.stringify(updateItemBody.itemRequest));

    return axios.put(
      `/admin/items/${itemId}`,
      formData,options
    );
  }



export const getUpdateItemMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateItem>>, TError,{itemId: number;data: UpdateItemBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateItem>>, TError,{itemId: number;data: UpdateItemBody}, TContext> => {

const mutationKey = ['updateItem'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateItem>>, {itemId: number;data: UpdateItemBody}> = (props) => {
          const {itemId,data} = props ?? {};

          return  updateItem(itemId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateItem>>>
    export type UpdateItemMutationBody = UpdateItemBody
    export type UpdateItemMutationError = AxiosError<ErrorResponse>

    /**
 * @summary 대여 물품 수정
 */
export const useUpdateItem = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateItem>>, TError,{itemId: number;data: UpdateItemBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateItem>>,
        TError,
        {itemId: number;data: UpdateItemBody},
        TContext
      > => {

      const mutationOptions = getUpdateItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 대여 물품을 삭제하는 관리자용 API
 * @summary 대여 물품 삭제
 */
export const deleteItem = (
    itemId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/admin/items/${itemId}`,options
    );
  }



export const getDeleteItemMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItem>>, TError,{itemId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteItem>>, TError,{itemId: number}, TContext> => {

const mutationKey = ['deleteItem'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteItem>>, {itemId: number}> = (props) => {
          const {itemId} = props ?? {};

          return  deleteItem(itemId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteItem>>>
    
    export type DeleteItemMutationError = AxiosError<ErrorResponse>

    /**
 * @summary 대여 물품 삭제
 */
export const useDeleteItem = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItem>>, TError,{itemId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteItem>>,
        TError,
        {itemId: number},
        TContext
      > => {

      const mutationOptions = getDeleteItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 대여 상태 별로 본인의 대여 기록을 조회하는 API
 * @summary 본인의 대여 기록 조회
 */
export const getMemberRentalHistory = (
    params?: GetMemberRentalHistoryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RentalHistoryFindAllResponse>> => {
    
    
    return axios.get(
      `/rentals`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMemberRentalHistoryQueryKey = (params?: GetMemberRentalHistoryParams,) => {
    return [`/rentals`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMemberRentalHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = AxiosError<unknown>>(params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMemberRentalHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemberRentalHistory>>> = ({ signal }) => getMemberRentalHistory(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMemberRentalHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getMemberRentalHistory>>>
export type GetMemberRentalHistoryQueryError = AxiosError<unknown>


export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = AxiosError<unknown>>(
 params: undefined |  GetMemberRentalHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberRentalHistory>>,
          TError,
          Awaited<ReturnType<typeof getMemberRentalHistory>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = AxiosError<unknown>>(
 params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberRentalHistory>>,
          TError,
          Awaited<ReturnType<typeof getMemberRentalHistory>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = AxiosError<unknown>>(
 params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 본인의 대여 기록 조회
 */

export function useGetMemberRentalHistory<TData = Awaited<ReturnType<typeof getMemberRentalHistory>>, TError = AxiosError<unknown>>(
 params?: GetMemberRentalHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberRentalHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMemberRentalHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 물품을 대여 신청하는 사용자용 API
 * @summary 물품 대여 신청
 */
export const createRental = (
    rentalHistoryRequest: RentalHistoryRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/rentals`,
      rentalHistoryRequest,options
    );
  }



export const getCreateRentalMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRental>>, TError,{data: RentalHistoryRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createRental>>, TError,{data: RentalHistoryRequest}, TContext> => {

const mutationKey = ['createRental'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRental>>, {data: RentalHistoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createRental(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRentalMutationResult = NonNullable<Awaited<ReturnType<typeof createRental>>>
    export type CreateRentalMutationBody = RentalHistoryRequest
    export type CreateRentalMutationError = AxiosError<unknown>

    /**
 * @summary 물품 대여 신청
 */
export const useCreateRental = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRental>>, TError,{data: RentalHistoryRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createRental>>,
        TError,
        {data: RentalHistoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const createDevRental = (
    rentalHistoryRequest: RentalHistoryRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/rentals/dev`,
      rentalHistoryRequest,options
    );
  }



export const getCreateDevRentalMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDevRental>>, TError,{data: RentalHistoryRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createDevRental>>, TError,{data: RentalHistoryRequest}, TContext> => {

const mutationKey = ['createDevRental'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDevRental>>, {data: RentalHistoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createDevRental(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDevRentalMutationResult = NonNullable<Awaited<ReturnType<typeof createDevRental>>>
    export type CreateDevRentalMutationBody = RentalHistoryRequest
    export type CreateDevRentalMutationError = AxiosError<unknown>

    export const useCreateDevRental = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDevRental>>, TError,{data: RentalHistoryRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDevRental>>,
        TError,
        {data: RentalHistoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateDevRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 서버 측으로 회원 기기의 FCM 토큰을 전송하는 API
 * @summary FCM 토큰 전송
 */
export const setFCMToken = (
    memberFCMTokenRequest: MemberFCMTokenRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/members/me/fcm-token`,
      memberFCMTokenRequest,options
    );
  }



export const getSetFCMTokenMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setFCMToken>>, TError,{data: MemberFCMTokenRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof setFCMToken>>, TError,{data: MemberFCMTokenRequest}, TContext> => {

const mutationKey = ['setFCMToken'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setFCMToken>>, {data: MemberFCMTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  setFCMToken(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetFCMTokenMutationResult = NonNullable<Awaited<ReturnType<typeof setFCMToken>>>
    export type SetFCMTokenMutationBody = MemberFCMTokenRequest
    export type SetFCMTokenMutationError = AxiosError<unknown>

    /**
 * @summary FCM 토큰 전송
 */
export const useSetFCMToken = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setFCMToken>>, TError,{data: MemberFCMTokenRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setFCMToken>>,
        TError,
        {data: MemberFCMTokenRequest},
        TContext
      > => {

      const mutationOptions = getSetFCMTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 구글 로그인으로 신규 가입 시 학번, 이름을 받기 위한 회원가입 API
 * @summary (구글 신규 가입 시) 회원가입
 */
export const signUp = (
    signUpRequest: SignUpRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SignUpResponse>> => {
    
    
    return axios.post(
      `/auth/sign-up`,
      signUpRequest,options
    );
  }



export const getSignUpMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpRequest}, TContext> => {

const mutationKey = ['signUp'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, {data: SignUpRequest}> = (props) => {
          const {data} = props ?? {};

          return  signUp(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
    export type SignUpMutationBody = SignUpRequest
    export type SignUpMutationError = AxiosError<unknown>

    /**
 * @summary (구글 신규 가입 시) 회원가입
 */
export const useSignUp = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof signUp>>,
        TError,
        {data: SignUpRequest},
        TContext
      > => {

      const mutationOptions = getSignUpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 관리자 데스크탑 페이지에 접속하기 위한 로그인 API
 * @summary (관리자 데스크탑) 로그인
 */
export const loginAdmin = (
    adminLoginRequest: AdminLoginRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminLoginResponse>> => {
    
    
    return axios.post(
      `/auth/admin-login`,
      adminLoginRequest,options
    );
  }



export const getLoginAdminMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAdmin>>, TError,{data: AdminLoginRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof loginAdmin>>, TError,{data: AdminLoginRequest}, TContext> => {

const mutationKey = ['loginAdmin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginAdmin>>, {data: AdminLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  loginAdmin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginAdminMutationResult = NonNullable<Awaited<ReturnType<typeof loginAdmin>>>
    export type LoginAdminMutationBody = AdminLoginRequest
    export type LoginAdminMutationError = AxiosError<ErrorResponse>

    /**
 * @summary (관리자 데스크탑) 로그인
 */
export const useLoginAdmin = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAdmin>>, TError,{data: AdminLoginRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginAdmin>>,
        TError,
        {data: AdminLoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginAdminMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 학생회비 납부자 목록을 전체 혹은 페이지별로 조회하는 관리자용 API
 * @summary 학생회비 납부자 목록 조회
 */
export const getAllPayers = (
    params?: GetAllPayersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PayerFindAllResponse>> => {
    
    
    return axios.get(
      `/admin/members/payers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllPayersQueryKey = (params?: GetAllPayersParams,) => {
    return [`/admin/members/payers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllPayersQueryOptions = <TData = Awaited<ReturnType<typeof getAllPayers>>, TError = AxiosError<unknown>>(params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPayersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPayers>>> = ({ signal }) => getAllPayers(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPayersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPayers>>>
export type GetAllPayersQueryError = AxiosError<unknown>


export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAllPayersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPayers>>,
          TError,
          Awaited<ReturnType<typeof getAllPayers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = AxiosError<unknown>>(
 params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPayers>>,
          TError,
          Awaited<ReturnType<typeof getAllPayers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = AxiosError<unknown>>(
 params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 학생회비 납부자 목록 조회
 */

export function useGetAllPayers<TData = Awaited<ReturnType<typeof getAllPayers>>, TError = AxiosError<unknown>>(
 params?: GetAllPayersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPayers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPayersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 학생회비 납부자 데이터를 추가하는 관리자용 API
 * @summary 학생회비 납부자 추가
 */
export const addPayers = (
    payerRequest: PayerRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/admin/members/payers`,
      payerRequest,options
    );
  }



export const getAddPayersMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPayers>>, TError,{data: PayerRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addPayers>>, TError,{data: PayerRequest}, TContext> => {

const mutationKey = ['addPayers'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPayers>>, {data: PayerRequest}> = (props) => {
          const {data} = props ?? {};

          return  addPayers(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPayersMutationResult = NonNullable<Awaited<ReturnType<typeof addPayers>>>
    export type AddPayersMutationBody = PayerRequest
    export type AddPayersMutationError = AxiosError<unknown>

    /**
 * @summary 학생회비 납부자 추가
 */
export const useAddPayers = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPayers>>, TError,{data: PayerRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addPayers>>,
        TError,
        {data: PayerRequest},
        TContext
      > => {

      const mutationOptions = getAddPayersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 학생회비 납부자를 삭제하는 관리자용 API
 * @summary 학생회비 납부자 삭제
 */
export const deletePayers = (
    payerDeleteRequest: PayerDeleteRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/admin/members/payers`,{data:
      payerDeleteRequest, ...options}
    );
  }



export const getDeletePayersMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePayers>>, TError,{data: PayerDeleteRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePayers>>, TError,{data: PayerDeleteRequest}, TContext> => {

const mutationKey = ['deletePayers'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePayers>>, {data: PayerDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  deletePayers(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePayersMutationResult = NonNullable<Awaited<ReturnType<typeof deletePayers>>>
    export type DeletePayersMutationBody = PayerDeleteRequest
    export type DeletePayersMutationError = AxiosError<unknown>

    /**
 * @summary 학생회비 납부자 삭제
 */
export const useDeletePayers = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePayers>>, TError,{data: PayerDeleteRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePayers>>,
        TError,
        {data: PayerDeleteRequest},
        TContext
      > => {

      const mutationOptions = getDeletePayersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 관리자 목록을 조회하는 API
 * @summary 관리자 목록 조회
 */
export const getAdminList = (
    params?: GetAdminListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminFindAllResponse>> => {
    
    
    return axios.get(
      `/admin/members/admins`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAdminListQueryKey = (params?: GetAdminListParams,) => {
    return [`/admin/members/admins`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminListQueryOptions = <TData = Awaited<ReturnType<typeof getAdminList>>, TError = AxiosError<unknown>>(params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminList>>> = ({ signal }) => getAdminList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminListQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminList>>>
export type GetAdminListQueryError = AxiosError<unknown>


export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAdminListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminList>>,
          TError,
          Awaited<ReturnType<typeof getAdminList>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = AxiosError<unknown>>(
 params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminList>>,
          TError,
          Awaited<ReturnType<typeof getAdminList>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = AxiosError<unknown>>(
 params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 관리자 목록 조회
 */

export function useGetAdminList<TData = Awaited<ReturnType<typeof getAdminList>>, TError = AxiosError<unknown>>(
 params?: GetAdminListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminList>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 회원을 관리자에 추가하는 API
 * @summary 관리자 추가
 */
export const addAdmins = (
    adminRequest: AdminRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/admin/members/admins`,
      adminRequest,options
    );
  }



export const getAddAdminsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addAdmins>>, TError,{data: AdminRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addAdmins>>, TError,{data: AdminRequest}, TContext> => {

const mutationKey = ['addAdmins'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addAdmins>>, {data: AdminRequest}> = (props) => {
          const {data} = props ?? {};

          return  addAdmins(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddAdminsMutationResult = NonNullable<Awaited<ReturnType<typeof addAdmins>>>
    export type AddAdminsMutationBody = AdminRequest
    export type AddAdminsMutationError = AxiosError<unknown>

    /**
 * @summary 관리자 추가
 */
export const useAddAdmins = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addAdmins>>, TError,{data: AdminRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addAdmins>>,
        TError,
        {data: AdminRequest},
        TContext
      > => {

      const mutationOptions = getAddAdminsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 관리자 목록에서 회원을 삭제하는 API
 * @summary 관리자 삭제
 */
export const deleteAdmins = (
    adminRequest: AdminRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/admin/members/admins`,{data:
      adminRequest, ...options}
    );
  }



export const getDeleteAdminsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdmins>>, TError,{data: AdminRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdmins>>, TError,{data: AdminRequest}, TContext> => {

const mutationKey = ['deleteAdmins'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdmins>>, {data: AdminRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteAdmins(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdmins>>>
    export type DeleteAdminsMutationBody = AdminRequest
    export type DeleteAdminsMutationError = AxiosError<unknown>

    /**
 * @summary 관리자 삭제
 */
export const useDeleteAdmins = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdmins>>, TError,{data: AdminRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdmins>>,
        TError,
        {data: AdminRequest},
        TContext
      > => {

      const mutationOptions = getDeleteAdminsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 대여 물품 목록을 조회하는 관리자용 API
 * @summary 대여 물품 목록 조회
 */
export const getAllAdminItems = (
    params?: GetAllAdminItemsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminItemFindAllResponse>> => {
    
    
    return axios.get(
      `/admin/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllAdminItemsQueryKey = (params?: GetAllAdminItemsParams,) => {
    return [`/admin/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllAdminItemsQueryOptions = <TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = AxiosError<unknown>>(params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAdminItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAdminItems>>> = ({ signal }) => getAllAdminItems(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAdminItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAdminItems>>>
export type GetAllAdminItemsQueryError = AxiosError<unknown>


export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAllAdminItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdminItems>>,
          TError,
          Awaited<ReturnType<typeof getAllAdminItems>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = AxiosError<unknown>>(
 params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdminItems>>,
          TError,
          Awaited<ReturnType<typeof getAllAdminItems>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = AxiosError<unknown>>(
 params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 대여 물품 목록 조회
 */

export function useGetAllAdminItems<TData = Awaited<ReturnType<typeof getAllAdminItems>>, TError = AxiosError<unknown>>(
 params?: GetAllAdminItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAdminItems>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAdminItemsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 대여 물품을 등록하는 관리자용 API
 * @summary 대여 물품 등록
 */
export const addItem = (
    addItemBody: AddItemBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`image`, addItemBody.image)
formData.append(`itemRequest`, JSON.stringify(addItemBody.itemRequest));

    return axios.post(
      `/admin/items`,
      formData,options
    );
  }



export const getAddItemMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addItem>>, TError,{data: AddItemBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addItem>>, TError,{data: AddItemBody}, TContext> => {

const mutationKey = ['addItem'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addItem>>, {data: AddItemBody}> = (props) => {
          const {data} = props ?? {};

          return  addItem(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddItemMutationResult = NonNullable<Awaited<ReturnType<typeof addItem>>>
    export type AddItemMutationBody = AddItemBody
    export type AddItemMutationError = AxiosError<ErrorResponse>

    /**
 * @summary 대여 물품 등록
 */
export const useAddItem = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addItem>>, TError,{data: AddItemBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addItem>>,
        TError,
        {data: AddItemBody},
        TContext
      > => {

      const mutationOptions = getAddItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 대여 신청을 취소하는 API입니다. 신청한 사용자는 대여 신청을 취소할 수 있습니다.
 * @summary 대여 취소
 */
export const cancelRental = (
    rentalHistoryId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.patch(
      `/rentals/${rentalHistoryId}`,undefined,options
    );
  }



export const getCancelRentalMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelRental>>, TError,{rentalHistoryId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof cancelRental>>, TError,{rentalHistoryId: number}, TContext> => {

const mutationKey = ['cancelRental'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelRental>>, {rentalHistoryId: number}> = (props) => {
          const {rentalHistoryId} = props ?? {};

          return  cancelRental(rentalHistoryId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelRentalMutationResult = NonNullable<Awaited<ReturnType<typeof cancelRental>>>
    
    export type CancelRentalMutationError = AxiosError<unknown>

    /**
 * @summary 대여 취소
 */
export const useCancelRental = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelRental>>, TError,{rentalHistoryId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cancelRental>>,
        TError,
        {rentalHistoryId: number},
        TContext
      > => {

      const mutationOptions = getCancelRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 대여한 물품의 반납을 신청하는 API입니다. 반납 요청을 통해 대여 상태가 변경됩니다.
 * @summary 반납 신청
 */
export const returnRental = (
    rentalHistoryId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.patch(
      `/rentals/return/${rentalHistoryId}`,undefined,options
    );
  }



export const getReturnRentalMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof returnRental>>, TError,{rentalHistoryId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof returnRental>>, TError,{rentalHistoryId: number}, TContext> => {

const mutationKey = ['returnRental'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof returnRental>>, {rentalHistoryId: number}> = (props) => {
          const {rentalHistoryId} = props ?? {};

          return  returnRental(rentalHistoryId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReturnRentalMutationResult = NonNullable<Awaited<ReturnType<typeof returnRental>>>
    
    export type ReturnRentalMutationError = AxiosError<unknown>

    /**
 * @summary 반납 신청
 */
export const useReturnRental = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof returnRental>>, TError,{rentalHistoryId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof returnRental>>,
        TError,
        {rentalHistoryId: number},
        TContext
      > => {

      const mutationOptions = getReturnRentalMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 사용자가 특정 알림을 읽음 처리합니다.
 * @summary 알림 읽음 처리
 */
export const readNotification = (
    notificationId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.patch(
      `/notifications/${notificationId}`,undefined,options
    );
  }



export const getReadNotificationMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readNotification>>, TError,{notificationId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof readNotification>>, TError,{notificationId: number}, TContext> => {

const mutationKey = ['readNotification'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof readNotification>>, {notificationId: number}> = (props) => {
          const {notificationId} = props ?? {};

          return  readNotification(notificationId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReadNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof readNotification>>>
    
    export type ReadNotificationMutationError = AxiosError<void>

    /**
 * @summary 알림 읽음 처리
 */
export const useReadNotification = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readNotification>>, TError,{notificationId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof readNotification>>,
        TError,
        {notificationId: number},
        TContext
      > => {

      const mutationOptions = getReadNotificationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 사용자가 알림을 모두 읽음 처리합니다.
 * @summary 알림 모두 읽음 처리
 */
export const readAllNotifications = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.patch(
      `/notifications/all`,undefined,options
    );
  }



export const getReadAllNotificationsMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readAllNotifications>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof readAllNotifications>>, TError,void, TContext> => {

const mutationKey = ['readAllNotifications'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof readAllNotifications>>, void> = () => {
          

          return  readAllNotifications(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReadAllNotificationsMutationResult = NonNullable<Awaited<ReturnType<typeof readAllNotifications>>>
    
    export type ReadAllNotificationsMutationError = AxiosError<void>

    /**
 * @summary 알림 모두 읽음 처리
 */
export const useReadAllNotifications = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof readAllNotifications>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof readAllNotifications>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getReadAllNotificationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 대여 승인, 대여, 반납 승인, 반납 처리 등을 위해 대여 기록의 상태를 변경하는 관리자용 API
 * @summary 대여 상태 변경
 */
export const updateRentalStatus = (
    rentalHistoryId: number,
    rentalStatusUpdateRequest: RentalStatusUpdateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.patch(
      `/admin/rentals/${rentalHistoryId}`,
      rentalStatusUpdateRequest,options
    );
  }



export const getUpdateRentalStatusMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRentalStatus>>, TError,{rentalHistoryId: number;data: RentalStatusUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateRentalStatus>>, TError,{rentalHistoryId: number;data: RentalStatusUpdateRequest}, TContext> => {

const mutationKey = ['updateRentalStatus'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRentalStatus>>, {rentalHistoryId: number;data: RentalStatusUpdateRequest}> = (props) => {
          const {rentalHistoryId,data} = props ?? {};

          return  updateRentalStatus(rentalHistoryId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRentalStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateRentalStatus>>>
    export type UpdateRentalStatusMutationBody = RentalStatusUpdateRequest
    export type UpdateRentalStatusMutationError = AxiosError<unknown>

    /**
 * @summary 대여 상태 변경
 */
export const useUpdateRentalStatus = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRentalStatus>>, TError,{rentalHistoryId: number;data: RentalStatusUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateRentalStatus>>,
        TError,
        {rentalHistoryId: number;data: RentalStatusUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateRentalStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 로그인한 사용자의 대여 기록 중, 대여 상태가 RENTAL, RETURN_PENDING, RETURN_CONFIRMED인 항목들을 조회하는 API
 * @summary 본인의 반납 필요 대여 기록 조회
 */
export const getReturnRequiredHistory = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ReturnRequiredItemFindAllResponse>> => {
    
    
    return axios.get(
      `/rentals/return-required`,options
    );
  }


export const getGetReturnRequiredHistoryQueryKey = () => {
    return [`/rentals/return-required`] as const;
    }

    
export const getGetReturnRequiredHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReturnRequiredHistoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReturnRequiredHistory>>> = ({ signal }) => getReturnRequiredHistory({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReturnRequiredHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getReturnRequiredHistory>>>
export type GetReturnRequiredHistoryQueryError = AxiosError<unknown>


export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReturnRequiredHistory>>,
          TError,
          Awaited<ReturnType<typeof getReturnRequiredHistory>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReturnRequiredHistory>>,
          TError,
          Awaited<ReturnType<typeof getReturnRequiredHistory>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 본인의 반납 필요 대여 기록 조회
 */

export function useGetReturnRequiredHistory<TData = Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReturnRequiredHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReturnRequiredHistoryQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 로그인한 사용자의 알림 목록을 최신순으로 조회합니다.
 * @summary 사용자의 알림 목록 조회
 */
export const getNotifications = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NotificationFindAllResponse>> => {
    
    
    return axios.get(
      `/notifications`,options
    );
  }


export const getGetNotificationsQueryKey = () => {
    return [`/notifications`] as const;
    }

    
export const getGetNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotifications>>> = ({ signal }) => getNotifications({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotifications>>>
export type GetNotificationsQueryError = AxiosError<unknown>


export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotifications>>,
          TError,
          Awaited<ReturnType<typeof getNotifications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotifications>>,
          TError,
          Awaited<ReturnType<typeof getNotifications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용자의 알림 목록 조회
 */

export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 로그인한 사용자의 알림 개수를 조회합니다. (메인 페이지)
 * @summary 알림 개수 조회
 */
export const getNotificationCount = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NotificationCountResponse>> => {
    
    
    return axios.get(
      `/notifications/count`,options
    );
  }


export const getGetNotificationCountQueryKey = () => {
    return [`/notifications/count`] as const;
    }

    
export const getGetNotificationCountQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationCount>>> = ({ signal }) => getNotificationCount({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationCountQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationCount>>>
export type GetNotificationCountQueryError = AxiosError<unknown>


export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationCount>>,
          TError,
          Awaited<ReturnType<typeof getNotificationCount>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationCount>>,
          TError,
          Awaited<ReturnType<typeof getNotificationCount>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 알림 개수 조회
 */

export function useGetNotificationCount<TData = Awaited<ReturnType<typeof getNotificationCount>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationCount>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationCountQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 검색어에 따라 물품 이름에 포함된 단어를 기반으로 대여 물품 목록을 조회합니다.
 * @summary 대여 물품 목록 조회
 */
export const getItems = (
    params?: GetItemsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ItemFindAllResponse>> => {
    
    
    return axios.get(
      `/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetItemsQueryKey = (params?: GetItemsParams,) => {
    return [`/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetItemsQueryOptions = <TData = Awaited<ReturnType<typeof getItems>>, TError = AxiosError<unknown>>(params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItems>>> = ({ signal }) => getItems(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getItems>>>
export type GetItemsQueryError = AxiosError<unknown>


export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = AxiosError<unknown>>(
 params: undefined |  GetItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItems>>,
          TError,
          Awaited<ReturnType<typeof getItems>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = AxiosError<unknown>>(
 params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItems>>,
          TError,
          Awaited<ReturnType<typeof getItems>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = AxiosError<unknown>>(
 params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 대여 물품 목록 조회
 */

export function useGetItems<TData = Awaited<ReturnType<typeof getItems>>, TError = AxiosError<unknown>>(
 params?: GetItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 대여 기록을 조회하기 위한 관리자용 API
 * @summary 모든 대여 기록 조회
 */
export const getAllRentalHistories = (
    params?: GetAllRentalHistoriesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AdminRentalHistoryFindAllResponse>> => {
    
    
    return axios.get(
      `/admin/rentals`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllRentalHistoriesQueryKey = (params?: GetAllRentalHistoriesParams,) => {
    return [`/admin/rentals`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllRentalHistoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = AxiosError<unknown>>(params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRentalHistoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRentalHistories>>> = ({ signal }) => getAllRentalHistories(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllRentalHistoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRentalHistories>>>
export type GetAllRentalHistoriesQueryError = AxiosError<unknown>


export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAllRentalHistoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRentalHistories>>,
          TError,
          Awaited<ReturnType<typeof getAllRentalHistories>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = AxiosError<unknown>>(
 params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRentalHistories>>,
          TError,
          Awaited<ReturnType<typeof getAllRentalHistories>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = AxiosError<unknown>>(
 params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 모든 대여 기록 조회
 */

export function useGetAllRentalHistories<TData = Awaited<ReturnType<typeof getAllRentalHistories>>, TError = AxiosError<unknown>>(
 params?: GetAllRentalHistoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRentalHistories>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllRentalHistoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 관리자 대시보드 페이지 조회를 위한 API
 * @summary 관리자 대시보드 목록 조회
 */
export const getAllDashboardApplications = (
    params?: GetAllDashboardApplicationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DashboardResponse>> => {
    
    
    return axios.get(
      `/admin/rentals/dashboard`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllDashboardApplicationsQueryKey = (params?: GetAllDashboardApplicationsParams,) => {
    return [`/admin/rentals/dashboard`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllDashboardApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = AxiosError<unknown>>(params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDashboardApplicationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDashboardApplications>>> = ({ signal }) => getAllDashboardApplications(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllDashboardApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDashboardApplications>>>
export type GetAllDashboardApplicationsQueryError = AxiosError<unknown>


export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAllDashboardApplicationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDashboardApplications>>,
          TError,
          Awaited<ReturnType<typeof getAllDashboardApplications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = AxiosError<unknown>>(
 params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDashboardApplications>>,
          TError,
          Awaited<ReturnType<typeof getAllDashboardApplications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = AxiosError<unknown>>(
 params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 관리자 대시보드 목록 조회
 */

export function useGetAllDashboardApplications<TData = Awaited<ReturnType<typeof getAllDashboardApplications>>, TError = AxiosError<unknown>>(
 params?: GetAllDashboardApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDashboardApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllDashboardApplicationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 로그인한 사용자의 관리자 알림 목록을 최신순으로 조회합니다.
 * @summary 관리자 알림 목록 조회
 */
export const getAdminNotifications = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NotificationFindAllResponse>> => {
    
    
    return axios.get(
      `/admin/notifications`,options
    );
  }


export const getGetAdminNotificationsQueryKey = () => {
    return [`/admin/notifications`] as const;
    }

    
export const getGetAdminNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminNotificationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminNotifications>>> = ({ signal }) => getAdminNotifications({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminNotifications>>>
export type GetAdminNotificationsQueryError = AxiosError<unknown>


export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminNotifications>>,
          TError,
          Awaited<ReturnType<typeof getAdminNotifications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminNotifications>>,
          TError,
          Awaited<ReturnType<typeof getAdminNotifications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 관리자 알림 목록 조회
 */

export function useGetAdminNotifications<TData = Awaited<ReturnType<typeof getAdminNotifications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminNotificationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 회원 목록을 조회하는 API
 * @summary 회원 목록 조회
 */
export const getAllMembers = (
    params?: GetAllMembersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MemberFindAllResponse>> => {
    
    
    return axios.get(
      `/admin/members`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllMembersQueryKey = (params?: GetAllMembersParams,) => {
    return [`/admin/members`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllMembersQueryOptions = <TData = Awaited<ReturnType<typeof getAllMembers>>, TError = AxiosError<unknown>>(params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMembersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMembers>>> = ({ signal }) => getAllMembers(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMembers>>>
export type GetAllMembersQueryError = AxiosError<unknown>


export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAllMembersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMembers>>,
          TError,
          Awaited<ReturnType<typeof getAllMembers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = AxiosError<unknown>>(
 params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMembers>>,
          TError,
          Awaited<ReturnType<typeof getAllMembers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = AxiosError<unknown>>(
 params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 회원 목록 조회
 */

export function useGetAllMembers<TData = Awaited<ReturnType<typeof getAllMembers>>, TError = AxiosError<unknown>>(
 params?: GetAllMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMembers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMembersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 학생회비 납부자 데이터를 엑셀 파일로 다운받을 수 있는 관리자용 API
 * @summary 학생회비 납부자 Excel 파일 다운로드
 */
export const createPayerExcel = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.get(
      `/admin/members/payers/excel`,options
    );
  }


export const getCreatePayerExcelQueryKey = () => {
    return [`/admin/members/payers/excel`] as const;
    }

    
export const getCreatePayerExcelQueryOptions = <TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCreatePayerExcelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof createPayerExcel>>> = ({ signal }) => createPayerExcel({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CreatePayerExcelQueryResult = NonNullable<Awaited<ReturnType<typeof createPayerExcel>>>
export type CreatePayerExcelQueryError = AxiosError<unknown>


export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof createPayerExcel>>,
          TError,
          Awaited<ReturnType<typeof createPayerExcel>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof createPayerExcel>>,
          TError,
          Awaited<ReturnType<typeof createPayerExcel>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 학생회비 납부자 Excel 파일 다운로드
 */

export function useCreatePayerExcel<TData = Awaited<ReturnType<typeof createPayerExcel>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof createPayerExcel>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCreatePayerExcelQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
